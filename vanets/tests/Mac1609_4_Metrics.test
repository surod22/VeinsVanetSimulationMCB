%description:
handleLowerMsg should call metrics class 
method computeThroughput() when packet is received

%prerun-command: cp -r -v ../../../src/results/B_400Bytes_P_1000Bytes_Q_5-0.sca .

%includes:
#include <Mac16094MetricsTest.h>
#include <../../../src/Metrics.h>

%file:Mac16094MetricsTest.h
#ifndef __MAC16094METRICSTEST_H
#define __MAC16094METRICSTESTh_H

using namespace std; 
#include <../../../src/Mac16094Metrics.h>
#include <fstream>
#include <iomanip>


class Mac16094MetricsTest : public Mac16094Metrics{
	
   public: 
	void testComputeThroughputPacketsPerSecond(Metrics* metrics, double packetsReceived, double currentTime){
		cout<<setiosflags(ios::fixed)<<setprecision(16);	
		Mac16094Metrics::computeThroughput(metrics, packetsReceived, currentTime); 
		
		double result = Mac16094Metrics::getThroughputMetricMac();
		cout<<"throughputPps: "<<result<<endl;
		
	} 

	void testThroughputMegabitsPerSecond(Metrics* metrics, double messageBits, double mgbitsReceived, double currentTime){
		cout<<setiosflags(ios::fixed)<<setprecision(16);
		Mac16094Metrics::computeThroughputMbps(metrics, messageBits, mgbitsReceived, currentTime); 
	    double throughputResult = Mac16094Metrics::getThroughputMbps();
		cout<<"throughputMbps: "<<throughputResult<<endl; 
	}
	
	void testHandleLowerMsgCallsThroughputWhenReceivingBroadcast(cMessage* message){
		Mac16094Metrics::statsReceivedBroadcasts = 5; 
		//Mac16094Metrics::handleLowerMsg(message); 
		
		//double throughputResult = testGetThroughputMetric();
		//cout<<"throughputPps:"<<throughputResult<<endl;		
	}
	
	double testGetThroughputSignal(){
		return Mac16094Metrics::metrics->getThroughputSignal(); 
	}

	void testGetAvgThroughput(string fileName){
	
		const char *fileNameConstChar = fileName.c_str(); 
		ifstream configFile (fileNameConstChar); 
		if(configFile.is_open()){
			string word;
			for(string word; getline(configFile, word, ' ');){
			   if (word == "throghputMetricMac"){
				stringstream stream(word); 
				string numString = " "; 
				stream >> numString; 
				cout<< numString <<endl; 
				}
			}
		}
	}
};
#endif

%file: test.ned
package vanets.tests.work.Mac1609_4_Metrics;

simple Test{ 
	@isNetwork(true);
}

%file:package.ned
package vanets.tests.work.Mac1609_4_Metrics;
@namespace(Mac1609_4_Metrics);


%activity:

Metrics *metrics = new Metrics();
Mac16094MetricsTest *macMetrics = new Mac16094MetricsTest();
double simulationTime = 0; 
double currentPacketsReceived = 0; 

//when simulation time is zero get zero  
simulationTime = 0; 
currentPacketsReceived = 0;
macMetrics->testComputeThroughputPacketsPerSecond(metrics, currentPacketsReceived, simulationTime);

//when currentPackets is zero
currentPacketsReceived = 0;
simulationTime =5; 
macMetrics->testComputeThroughputPacketsPerSecond(metrics, currentPacketsReceived, simulationTime);

currentPacketsReceived = 5;
simulationTime = 10;
macMetrics->testComputeThroughputPacketsPerSecond(metrics, currentPacketsReceived, simulationTime);

cPacket *pkt = new cPacket();
cMessage *message = pkt; //Valid cPacket descendant of cMessage
macMetrics->testHandleLowerMsgCallsThroughputWhenReceivingBroadcast(message);

//when currentMgbis is zero
double currentMgbits = 0; 
cPacket *packet = dynamic_cast<cPacket*>(message); 
packet->setBitLength(1); 
simulationTime = 10; 
macMetrics->testThroughputMegabitsPerSecond(metrics, 1, currentMgbits, simulationTime); 

//when currentMbgits is not zero 
currentMgbits = 2; 
packet->setBitLength(4000000);
simulationTime = 10;
macMetrics->testThroughputMegabitsPerSecond(metrics, 4000000, currentMgbits, simulationTime);

//when packetLength is zero
currentMgbits = 2; 
packet->setBitLength(0);
simulationTime = 10; 
macMetrics->testThroughputMegabitsPerSecond(metrics, 0, currentMgbits, simulationTime); 

//when currentMgbits is a really big digit number
double currentMgbitsDbl = 200000000000000000000000000; 
packet->setBitLength(2000000000000000000); 
simulationTime = 10; 
macMetrics->testThroughputMegabitsPerSecond(metrics, 2000000000000000000, currentMgbitsDbl, simulationTime); 

macMetrics->testGetAvgThroughput("B_400Bytes_P_1000Bytes_Q_5-0.sca"); 

%contains: stdout
throughputPps: 0

%contains: stdout
throughputPps: 0

%contains: stdout
throughputPps: 0.5

%contains: stdout
throughputMbps: 0.0000001000000000

%contains: stdout
throughputMbps: 0.6000000000000000

%contains: stdout
throughputMbps: 0.2000000000000000 
